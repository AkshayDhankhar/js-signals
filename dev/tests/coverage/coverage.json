{"C:MillerPersonalopen_source_projectsjs-signalsdistjs-signals.js":{"lines":{"10":1,"16":1,"23":1,"41":1,"48":118,"55":118,"63":118,"70":118,"73":1,"88":83,"89":83,"90":82,"91":82,"92":23,"95":83,"104":25,"111":8,"119":1,"120":1,"128":59,"129":59,"130":59,"131":59,"139":1,"147":1,"154":3,"161":16,"168":0,"182":1,"187":72,"190":1,"213":127,"214":2,"217":125,"220":124,"221":6,"222":6,"223":2,"226":118,"227":118,"230":122,"239":167,"240":165,"241":126,"242":41,"245":124,"255":79,"265":48,"274":43,"275":1,"278":42,"279":41,"280":35,"281":35,"283":41,"290":8,"291":8,"292":23,"294":8,"301":40,"311":1,"319":1,"326":6,"335":2,"343":69,"344":1,"347":68,"352":67,"354":67,"356":83,"357":2,"367":4,"368":4,"375":0,"380":1},"functions":{"SignalBinding:41":118,"execute:87":83,"detach:103":25,"getListener:110":8,"dispose:118":1,"_destroy:127":59,"disable:138":1,"enable:146":1,"isEnabled:153":3,"isOnce:160":16,"toString:167":0,"Signal:182":72,"_registerListener:211":127,"_indexOfListener:238":167,"add:254":79,"addOnce:264":48,"remove:273":43,"removeAll:289":8,"getNumListeners:300":40,"disable:310":1,"enable:318":1,"isEnabled:325":6,"halt:334":2,"dispatch:342":69,"dispose:366":4,"toString:374":0,"(anonymous 1):10":1},"coveredLines":75,"calledLines":73,"coveredFunctions":27,"calledFunctions":25,"path":"C:\\Miller\\Personal\\open_source_projects\\js-signals\\dist\\js-signals.js","code":["/*jslint onevar:true, undef:true, newcap:true, regexp:true, bitwise:true, maxerr:50, indent:4, white:false, nomen:false, plusplus:false */","","/*!!"," * JS Signals <http://millermedeiros.github.com/js-signals/>"," * Released under the MIT license <http://www.opensource.org/licenses/mit-license.php>"," * @author Miller Medeiros <http://millermedeiros.com/>"," * @version 0.5.2"," * @build 138 (02/18/2011 07:22 PM)"," */","var signals = (function(){","","\u0009/**","\u0009 * @namespace Signals Namespace - Custom event/messaging system based on AS3 Signals","\u0009 * @name signals","\u0009 */","\u0009var signals = {};","","\u0009/**","\u0009 * Signals Version Number","\u0009 * @type string","\u0009 * @const","\u0009 */","\u0009signals.VERSION = '0.5.2';","","\u0009","\u0009// SignalBinding -------------------------------------------------","\u0009//================================================================","\u0009","\u0009/**","\u0009 * Object that represents a binding between a Signal and a listener function.","\u0009 * <br />- <strong>This is an internall constructor and shouldn't be called by regular user.</strong>","\u0009 * <br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.","\u0009 * @author Miller Medeiros","\u0009 * @constructor","\u0009 * @name signals.SignalBinding","\u0009 * @param {signals.Signal} signal\u0009Reference to Signal object that listener is currently bound to.","\u0009 * @param {Function} listener\u0009Handler function bound to the signal.","\u0009 * @param {boolean} isOnce\u0009If binding should be executed just once.","\u0009 * @param {Object} [listenerContext]\u0009Context on which listener will be executed (object that should represent the `this` variable inside listener function).","\u0009 */","\u0009 function SignalBinding(signal, listener, isOnce, listenerContext){","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Handler function bound to the signal.","\u0009\u0009 * @type Function","\u0009\u0009 * @private","\u0009\u0009 */","\u0009\u0009this._listener = listener;","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * If binding should be executed just once.","\u0009\u0009 * @type boolean","\u0009\u0009 * @private","\u0009\u0009 */","\u0009\u0009this._isOnce = isOnce;","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Context on which listener will be executed (object that should represent the `this` variable inside listener function).","\u0009\u0009 * @memberOf signals.SignalBinding.prototype","\u0009\u0009 * @name context","\u0009\u0009 * @type {Object|undefined}","\u0009\u0009 */","\u0009\u0009this.context = listenerContext;","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Reference to Signal object that listener is currently bound to.","\u0009\u0009 * @type signals.Signal","\u0009\u0009 * @private","\u0009\u0009 */","\u0009\u0009this._signal = signal;","\u0009}","\u0009","\u0009SignalBinding.prototype = /** @lends signals.SignalBinding.prototype */ {","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * @type boolean","\u0009\u0009 * @private","\u0009\u0009 */","\u0009\u0009_isEnabled : true,","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Call listener passing arbitrary parameters.","\u0009\u0009 * <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p> ","\u0009\u0009 * @param {Array} [paramsArr]\u0009Array of parameters that should be passed to the listener","\u0009\u0009 * @return {*} Value returned by the listener.","\u0009\u0009 */","\u0009\u0009execute : function(paramsArr){","\u0009\u0009\u0009var r;","\u0009\u0009\u0009if(this._isEnabled){","\u0009\u0009\u0009\u0009r = this._listener.apply(this.context, paramsArr);","\u0009\u0009\u0009\u0009if(this._isOnce){","\u0009\u0009\u0009\u0009\u0009this.detach();","\u0009\u0009\u0009\u0009}","\u0009\u0009\u0009}","\u0009\u0009\u0009return r; //avoid warnings on some editors","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Detach binding from signal.","\u0009\u0009 * - alias to: mySignal.remove(myBinding.getListener());","\u0009\u0009 * @return {Function} Handler function bound to the signal.","\u0009\u0009 */","\u0009\u0009detach : function(){","\u0009\u0009\u0009return this._signal.remove(this._listener);","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * @return {Function} Handler function bound to the signal.","\u0009\u0009 */","\u0009\u0009getListener : function(){","\u0009\u0009\u0009return this._listener;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Remove binding from signal and destroy any reference to external Objects (destroy SignalBinding object).","\u0009\u0009 * <p><strong>IMPORTANT:</strong> calling methods on the binding instance after calling dispose will throw errors.</p>","\u0009\u0009 */","\u0009\u0009dispose : function(){","\u0009\u0009\u0009this.detach();","\u0009\u0009\u0009this._destroy();","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Delete all instance properties","\u0009\u0009 * @private","\u0009\u0009 */","\u0009\u0009_destroy : function(){","\u0009\u0009\u0009delete this._signal;","\u0009\u0009\u0009delete this._isOnce;","\u0009\u0009\u0009delete this._listener;","\u0009\u0009\u0009delete this.context;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Disable SignalBinding, block listener execution. Listener will only be executed after calling `enable()`.  ","\u0009\u0009 * @see signals.SignalBinding.enable()","\u0009\u0009 */","\u0009\u0009disable : function(){","\u0009\u0009\u0009this._isEnabled = false;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Enable SignalBinding. Enable listener execution.","\u0009\u0009 * @see signals.SignalBinding.disable()","\u0009\u0009 */","\u0009\u0009enable : function(){","\u0009\u0009\u0009this._isEnabled = true;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * @return {boolean} If SignalBinding is currently paused and won't execute listener during dispatch.","\u0009\u0009 */","\u0009\u0009isEnabled : function(){","\u0009\u0009\u0009return this._isEnabled;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * @return {boolean} If SignalBinding will only be executed once.","\u0009\u0009 */","\u0009\u0009isOnce : function(){","\u0009\u0009\u0009return this._isOnce;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * @return {string} String representation of the object.","\u0009\u0009 */","\u0009\u0009toString : function(){","\u0009\u0009\u0009return '[SignalBinding isOnce: '+ this._isOnce +', isEnabled: '+ this._isEnabled +']';","\u0009\u0009}","\u0009\u0009","\u0009};","\u0009","\u0009// Signal --------------------------------------------------------","\u0009//================================================================","\u0009","\u0009/**","\u0009 * Custom event broadcaster","\u0009 * <br />- inspired by Robert Penner's AS3 Signals.","\u0009 * @author Miller Medeiros","\u0009 * @constructor","\u0009 */","\u0009signals.Signal = function(){","\u0009\u0009/**","\u0009\u0009 * @type Array.<SignalBinding>","\u0009\u0009 * @private","\u0009\u0009 */","\u0009\u0009this._bindings = [];","\u0009};","\u0009","\u0009signals.Signal.prototype = {","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * @type boolean","\u0009\u0009 * @private","\u0009\u0009 */","\u0009\u0009_shouldPropagate : true,","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * @type boolean","\u0009\u0009 * @private","\u0009\u0009 */","\u0009\u0009_isEnabled : true,","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * @param {Function} listener","\u0009\u0009 * @param {boolean} isOnce","\u0009\u0009 * @param {Object} [scope]","\u0009\u0009 * @return {SignalBinding}","\u0009\u0009 * @private","\u0009\u0009 */","\u0009\u0009_registerListener : function(listener, isOnce, scope){","\u0009\u0009\u0009","\u0009\u0009\u0009if(typeof listener !== 'function'){","\u0009\u0009\u0009\u0009throw new Error('listener is a required param of add() and addOnce() and should be a Function.');","\u0009\u0009\u0009}","\u0009\u0009\u0009","\u0009\u0009\u0009var prevIndex = this._indexOfListener(listener),","\u0009\u0009\u0009\u0009binding;","\u0009\u0009\u0009","\u0009\u0009\u0009if(prevIndex !== -1){ //avoid creating a new Binding for same listener if already added to list","\u0009\u0009\u0009\u0009binding = this._bindings[prevIndex];","\u0009\u0009\u0009\u0009if(binding.isOnce() !== isOnce){","\u0009\u0009\u0009\u0009\u0009throw new Error('You cannot add'+ (isOnce? '' : 'Once') +'() then add'+ (!isOnce? '' : 'Once') +'() the same listener without removing the relationship first.');","\u0009\u0009\u0009\u0009}","\u0009\u0009\u0009} else {","\u0009\u0009\u0009\u0009binding = new SignalBinding(this, listener, isOnce, scope);","\u0009\u0009\u0009\u0009this._bindings.push(binding);","\u0009\u0009\u0009}","\u0009\u0009\u0009","\u0009\u0009\u0009return binding;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * @param {Function} listener","\u0009\u0009 * @return {number}","\u0009\u0009 * @private","\u0009\u0009 */","\u0009\u0009_indexOfListener : function(listener){","\u0009\u0009\u0009var n = this._bindings.length;","\u0009\u0009\u0009while(n--){","\u0009\u0009\u0009\u0009if(this._bindings[n]._listener === listener){","\u0009\u0009\u0009\u0009\u0009return n;","\u0009\u0009\u0009\u0009}","\u0009\u0009\u0009}","\u0009\u0009\u0009return -1;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Add a listener to the signal.","\u0009\u0009 * @param {Function} listener\u0009Signal handler function.","\u0009\u0009 * @param {Object} [scope]\u0009Context on which listener will be executed (object that should represent the `this` variable inside listener function).","\u0009\u0009 * @return {SignalBinding} An Object representing the binding between the Signal and listener.","\u0009\u0009 */","\u0009\u0009add : function(listener, scope){","\u0009\u0009\u0009return this._registerListener(listener, false, scope);","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Add listener to the signal that should be removed after first execution (will be executed only once).","\u0009\u0009 * @param {Function} listener\u0009Signal handler function.","\u0009\u0009 * @param {Object} [scope]\u0009Context on which listener will be executed (object that should represent the `this` variable inside listener function).","\u0009\u0009 * @return {SignalBinding} An Object representing the binding between the Signal and listener.","\u0009\u0009 */","\u0009\u0009addOnce : function(listener, scope){","\u0009\u0009\u0009return this._registerListener(listener, true, scope);","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Remove a single listener from the dispatch queue.","\u0009\u0009 * @param {Function} listener\u0009Handler function that should be removed.","\u0009\u0009 * @return {Function} Listener handler function.","\u0009\u0009 */","\u0009\u0009remove : function(listener){","\u0009\u0009\u0009if(typeof listener !== 'function'){","\u0009\u0009\u0009\u0009throw new Error('listener is a required param of remove() and should be a Function.');","\u0009\u0009\u0009}","\u0009\u0009\u0009","\u0009\u0009\u0009var i = this._indexOfListener(listener);","\u0009\u0009\u0009if(i !== -1){","\u0009\u0009\u0009\u0009this._bindings[i]._destroy(); //no reason to a SignalBinding exist if it isn't attached to a signal","\u0009\u0009\u0009\u0009this._bindings.splice(i, 1);","\u0009\u0009\u0009}","\u0009\u0009\u0009return listener;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Remove all listeners from the Signal.","\u0009\u0009 */","\u0009\u0009removeAll : function(){","\u0009\u0009\u0009var n = this._bindings.length;","\u0009\u0009\u0009while(n--){","\u0009\u0009\u0009\u0009this._bindings[n]._destroy();","\u0009\u0009\u0009}","\u0009\u0009\u0009this._bindings.length = 0;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * @return {number} Number of listeners attached to the Signal.","\u0009\u0009 */","\u0009\u0009getNumListeners : function(){","\u0009\u0009\u0009return this._bindings.length;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Disable Signal. Block dispatch to listeners until `enable()` is called.","\u0009\u0009 * <p><strong>IMPORTANT:</strong> If this method is called during a dispatch it will only have effect on the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>","\u0009\u0009 * @see signals.Signal.prototype.enable","\u0009\u0009 * @see signals.Signal.prototype.halt","\u0009\u0009 */","\u0009\u0009disable : function(){","\u0009\u0009\u0009this._isEnabled = false;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Enable broadcast to listeners.","\u0009\u0009 * @see signals.Signal.prototype.disable","\u0009\u0009 */","\u0009\u0009enable : function(){","\u0009\u0009\u0009this._isEnabled = true;","\u0009\u0009}, ","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * @return {boolean} If Signal is currently enabled and will broadcast message to listeners.","\u0009\u0009 */","\u0009\u0009isEnabled : function(){","\u0009\u0009\u0009return this._isEnabled;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Stop propagation of the event, blocking the dispatch to next listeners on the queue.","\u0009\u0009 * <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>","\u0009\u0009 * @see signals.Signal.prototype.disable ","\u0009\u0009 */","\u0009\u0009halt : function(){","\u0009\u0009\u0009this._shouldPropagate = false;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Dispatch/Broadcast Signal to all listeners added to the queue. ","\u0009\u0009 * @param {...*} [params]\u0009Parameters that should be passed to each handler.","\u0009\u0009 */","\u0009\u0009dispatch : function(params){","\u0009\u0009\u0009if(! this._isEnabled){","\u0009\u0009\u0009\u0009return;","\u0009\u0009\u0009}","\u0009\u0009\u0009","\u0009\u0009\u0009var paramsArr = Array.prototype.slice.call(arguments),","\u0009\u0009\u0009\u0009bindings = this._bindings.slice(), //clone array in case add/remove items during dispatch","\u0009\u0009\u0009\u0009i,","\u0009\u0009\u0009\u0009n = this._bindings.length;","\u0009\u0009\u0009","\u0009\u0009\u0009this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.","\u0009\u0009\u0009\u0009\u0009\u0009","\u0009\u0009\u0009for(i=0; i<n; i++){","\u0009\u0009\u0009\u0009//execute all callbacks until end of the list or until a callback returns `false` or stops propagation","\u0009\u0009\u0009\u0009if(bindings[i].execute(paramsArr) === false || !this._shouldPropagate){","\u0009\u0009\u0009\u0009\u0009break;","\u0009\u0009\u0009\u0009}","\u0009\u0009\u0009}","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).","\u0009\u0009 * <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>","\u0009\u0009 */","\u0009\u0009dispose : function(){","\u0009\u0009\u0009this.removeAll();","\u0009\u0009\u0009delete this._bindings;","\u0009\u0009},","\u0009\u0009","\u0009\u0009/**","\u0009\u0009 * @return {string} String representation of the object.","\u0009\u0009 */","\u0009\u0009toString : function(){","\u0009\u0009\u0009return '[Signal isEnabled: '+ this._isEnabled +' numListeners: '+ this.getNumListeners() +']';","\u0009\u0009}","\u0009\u0009","\u0009};","","\u0009return signals;","\u0009","}());"]}}